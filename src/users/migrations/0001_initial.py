# Generated by Django 3.2 on 2021-09-21 12:35

import django.contrib.auth.models
import django.contrib.auth.validators
import django.contrib.gis.db.models.fields
import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('courses', '0001_initial'),
        ('contacts', '0001_initial'),
        ('auth', '0012_alter_user_first_name_max_length'),
        ('broadcast', '0002_promotion_course'),
        ('companies', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Student',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='Дата обновления')),
                ('first_name', models.CharField(max_length=50, verbose_name='Имя')),
                ('last_name', models.CharField(blank=True, max_length=50, null=True, verbose_name='Фамилия')),
                ('city', models.CharField(max_length=50, verbose_name='Город проживания')),
                ('tg_id', models.BigIntegerField(blank=True, null=True, unique=True, verbose_name='Telegram ID')),
                ('language_type', models.CharField(choices=[('1', 'Russian'), ('2', 'Uzbek')], default='1', max_length=20, verbose_name='Язык ученика')),
                ('phone', models.CharField(max_length=20, unique=True, verbose_name='Контактный телефон')),
                ('application_type', models.CharField(choices=[('1', 'Admin'), ('2', 'Telegram'), ('3', 'Web')], default='1', max_length=20, verbose_name='Как заполнил форму')),
                ('unique_code', models.CharField(blank=True, max_length=255, null=True, unique=True, verbose_name='Инвайт код')),
                ('is_client', models.BooleanField(default=False, verbose_name='Клиент')),
                ('checkout_date', models.DateTimeField(blank=True, null=True, verbose_name='Дата чекаута')),
                ('invite_link', models.CharField(blank=True, editable=False, max_length=255, null=True, verbose_name='Инвайт ссылка')),
                ('blocked_bot', models.BooleanField(default=False, verbose_name='Заблокировал бота')),
                ('comment', models.TextField(blank=True, null=True, verbose_name='Комментарий к пользователю')),
                ('location', django.contrib.gis.db.models.fields.PointField(blank=True, null=True, srid=4326, verbose_name='Локация')),
                ('games', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(blank=True, max_length=50), blank=True, null=True, size=None, verbose_name='Игры')),
                ('contact', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='contacts.contact', verbose_name='ТГ Профиль')),
                ('courses', models.ManyToManyField(through='courses.StudentCourse', to='courses.Course')),
                ('learning_centre', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='companies.learningcentre', verbose_name='Учебный центр')),
                ('lessons', models.ManyToManyField(through='courses.StudentLesson', to='courses.Lesson')),
                ('promo', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='broadcast.promotion', verbose_name='Из какого промо пришел')),
            ],
            options={
                'verbose_name': 'Студент',
                'verbose_name_plural': 'Студенты',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Админ',
                'verbose_name_plural': 'Админы',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Client',
            fields=[
            ],
            options={
                'verbose_name': 'Клиент',
                'verbose_name_plural': 'Клиенты',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('users.student',),
        ),
        migrations.CreateModel(
            name='Lead',
            fields=[
            ],
            options={
                'verbose_name': 'Лид',
                'verbose_name_plural': 'Лиды',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('users.student',),
        ),
    ]
