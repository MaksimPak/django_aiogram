# Generated by Django 3.2 on 2021-09-21 12:35

import courses.utils.uploaders
from django.db import migrations, models
import django.db.models.deletion
import general.utils.helpers
import general.validators


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='Дата обновления')),
                ('name', models.CharField(max_length=100, verbose_name='Название курса')),
                ('info', models.TextField(blank=True, null=True, verbose_name='Описание')),
                ('hashtag', models.CharField(blank=True, max_length=20, null=True, validators=[general.validators.validate_hashtag], verbose_name='Хештег')),
                ('start_message', models.TextField(blank=True, null=True, verbose_name='Сообщение для отправки студентам после начала курса')),
                ('end_message', models.TextField(blank=True, null=True, verbose_name='Сообщение для отправки студентам после завершения курса')),
                ('difficulty', models.CharField(choices=[('1', 'Beginner'), ('2', 'Intermediate'), ('3', 'Advanced')], max_length=20, verbose_name='Сложность')),
                ('price', models.BigIntegerField(verbose_name='Цена')),
                ('is_free', models.BooleanField(default=False, verbose_name='Бесплатный курс')),
                ('week_size', models.IntegerField(default=0, verbose_name='Количество уроков в неделю')),
                ('is_started', models.BooleanField(default=False, verbose_name='Курс начат')),
                ('is_finished', models.BooleanField(default=False, verbose_name='Курс закончен')),
                ('chat_id', models.BigIntegerField(help_text='\nЕсли вводится Chatid группы вам нужно создать группу, добавить туда бота, узнать её чат айди, и ввести его здесь.\nБоту надо дать админ права в группе чтобы он мог форвардить сообщения\n', verbose_name='Telegram ID')),
                ('autosend', models.BooleanField(default=False, verbose_name='Авто-отправка')),
                ('access_level', models.IntegerField(choices=[(1, 'ТГ Профиль'), (2, 'Лид'), (3, 'Клиент')], default=3, verbose_name='Доступ')),
                ('date_started', models.DateTimeField(blank=True, null=True, verbose_name='Дата начала курса')),
                ('date_finished', models.DateTimeField(blank=True, null=True, verbose_name='Дата окончания курса')),
            ],
            options={
                'verbose_name': 'Курс',
                'verbose_name_plural': 'Курсы',
            },
        ),
        migrations.CreateModel(
            name='Lesson',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='Дата обновления')),
                ('title', models.CharField(max_length=100, verbose_name='Название урока')),
                ('info', models.TextField(blank=True, null=True, verbose_name='Описание')),
                ('image', models.ImageField(blank=True, null=True, upload_to=courses.utils.uploaders.lesson_upload_directory, validators=[general.validators.validate_photo_extension], verbose_name='Картинка')),
                ('image_file_id', models.CharField(blank=True, editable=False, max_length=255, null=True, verbose_name='Photo file ID')),
                ('video', models.FileField(upload_to=courses.utils.uploaders.lesson_upload_directory, validators=[general.validators.validate_video_extension], verbose_name='Видео к уроку')),
                ('has_homework', models.BooleanField(default=False, verbose_name='Есть домашнее задание')),
                ('homework_desc', models.TextField(blank=True, null=True, verbose_name='Homework description')),
                ('date_sent', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='Дата отсылки урока')),
            ],
            options={
                'verbose_name': 'Урок',
                'verbose_name_plural': 'Уроки',
            },
        ),
        migrations.CreateModel(
            name='LessonUrl',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='Дата обновления')),
                ('hash', models.CharField(default=general.utils.helpers.generate_uuid, max_length=36, unique=True)),
                ('hits', models.IntegerField(default=0, verbose_name='Количество возможных переховод по ссылке')),
            ],
        ),
        migrations.CreateModel(
            name='StudentCourse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='Дата обновления')),
                ('has_paid', models.BooleanField(default=False, verbose_name='Оплатил курс')),
            ],
        ),
        migrations.CreateModel(
            name='StudentLesson',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='Дата обновления')),
                ('date_sent', models.DateTimeField(blank=True, null=True, verbose_name='Дата получения урока')),
                ('date_watched', models.DateTimeField(blank=True, null=True, verbose_name='Дата дата просмотра урока')),
                ('homework_sent', models.DateTimeField(blank=True, null=True, verbose_name='Дата отправки дз')),
                ('lesson', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='courses.lesson')),
            ],
        ),
    ]
